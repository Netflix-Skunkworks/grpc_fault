// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package faultinjector

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FaultInjectorClient is the client API for FaultInjector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FaultInjectorClient interface {
	// Sends a greeting
	EnumerateServices(ctx context.Context, in *EnumerateServicesRequest, opts ...grpc.CallOption) (*EnumerateServicesResponse, error)
	RegisterFault(ctx context.Context, in *RegisterFaultRequest, opts ...grpc.CallOption) (*RegisterFaultResponse, error)
	RemoveFault(ctx context.Context, in *RemoveFaultRequest, opts ...grpc.CallOption) (*RemoveFaultResponse, error)
}

type faultInjectorClient struct {
	cc grpc.ClientConnInterface
}

func NewFaultInjectorClient(cc grpc.ClientConnInterface) FaultInjectorClient {
	return &faultInjectorClient{cc}
}

func (c *faultInjectorClient) EnumerateServices(ctx context.Context, in *EnumerateServicesRequest, opts ...grpc.CallOption) (*EnumerateServicesResponse, error) {
	out := new(EnumerateServicesResponse)
	err := c.cc.Invoke(ctx, "/faultinjector.FaultInjector/EnumerateServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faultInjectorClient) RegisterFault(ctx context.Context, in *RegisterFaultRequest, opts ...grpc.CallOption) (*RegisterFaultResponse, error) {
	out := new(RegisterFaultResponse)
	err := c.cc.Invoke(ctx, "/faultinjector.FaultInjector/RegisterFault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faultInjectorClient) RemoveFault(ctx context.Context, in *RemoveFaultRequest, opts ...grpc.CallOption) (*RemoveFaultResponse, error) {
	out := new(RemoveFaultResponse)
	err := c.cc.Invoke(ctx, "/faultinjector.FaultInjector/RemoveFault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FaultInjectorServer is the server API for FaultInjector service.
// All implementations must embed UnimplementedFaultInjectorServer
// for forward compatibility
type FaultInjectorServer interface {
	// Sends a greeting
	EnumerateServices(context.Context, *EnumerateServicesRequest) (*EnumerateServicesResponse, error)
	RegisterFault(context.Context, *RegisterFaultRequest) (*RegisterFaultResponse, error)
	RemoveFault(context.Context, *RemoveFaultRequest) (*RemoveFaultResponse, error)
	mustEmbedUnimplementedFaultInjectorServer()
}

// UnimplementedFaultInjectorServer must be embedded to have forward compatible implementations.
type UnimplementedFaultInjectorServer struct {
}

func (UnimplementedFaultInjectorServer) EnumerateServices(context.Context, *EnumerateServicesRequest) (*EnumerateServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnumerateServices not implemented")
}
func (UnimplementedFaultInjectorServer) RegisterFault(context.Context, *RegisterFaultRequest) (*RegisterFaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFault not implemented")
}
func (UnimplementedFaultInjectorServer) RemoveFault(context.Context, *RemoveFaultRequest) (*RemoveFaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFault not implemented")
}
func (UnimplementedFaultInjectorServer) mustEmbedUnimplementedFaultInjectorServer() {}

// UnsafeFaultInjectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FaultInjectorServer will
// result in compilation errors.
type UnsafeFaultInjectorServer interface {
	mustEmbedUnimplementedFaultInjectorServer()
}

func RegisterFaultInjectorServer(s grpc.ServiceRegistrar, srv FaultInjectorServer) {
	s.RegisterService(&FaultInjector_ServiceDesc, srv)
}

func _FaultInjector_EnumerateServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnumerateServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaultInjectorServer).EnumerateServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faultinjector.FaultInjector/EnumerateServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaultInjectorServer).EnumerateServices(ctx, req.(*EnumerateServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaultInjector_RegisterFault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterFaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaultInjectorServer).RegisterFault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faultinjector.FaultInjector/RegisterFault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaultInjectorServer).RegisterFault(ctx, req.(*RegisterFaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaultInjector_RemoveFault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaultInjectorServer).RemoveFault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faultinjector.FaultInjector/RemoveFault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaultInjectorServer).RemoveFault(ctx, req.(*RemoveFaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FaultInjector_ServiceDesc is the grpc.ServiceDesc for FaultInjector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FaultInjector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "faultinjector.FaultInjector",
	HandlerType: (*FaultInjectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnumerateServices",
			Handler:    _FaultInjector_EnumerateServices_Handler,
		},
		{
			MethodName: "RegisterFault",
			Handler:    _FaultInjector_RegisterFault_Handler,
		},
		{
			MethodName: "RemoveFault",
			Handler:    _FaultInjector_RemoveFault_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "faultinjector.proto",
}
